import React, { useState } from 'react';
import { useAuth } from '@/contexts/AuthContext';
import { useSubscription } from '@/hooks/useSubscription';
import { useTextOperations } from '@/hooks/useTextOperations';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Brain, Shield, Loader2 } from 'lucide-react';
import ResultCard from '@/components/dashboard/ResultCard';

const HeroAIDetector: React.FC = () => {
  const { currentUser } = useAuth();
  const { subscription, fetchSubscription } = useSubscription();
  
  // Add error boundary handling
  try {
    const {
      inputText,
      resultText,
      isDetecting,
      isHumanizing,
      textCopied,
      detectionResult,
      humanizationResult,
      handleTextChange,
      detectAIText,
      humanizeText,
      copyToClipboard
    } = useTextOperations(currentUser, subscription, fetchSubscription);

    return (
      <div className="w-full max-w-4xl mx-auto space-y-6">
        {/* Text Input Card */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Brain className="w-5 h-5" />
              AI Content Detector
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <Textarea
              placeholder="Paste your text here to check if it was generated by AI..."
              value={inputText || ''}
              onChange={(e) => handleTextChange && handleTextChange(e.target.value)}
              className="min-h-[120px]"
            />
            
            <div className="flex flex-col sm:flex-row gap-3">
              <Button
                onClick={detectAIText}
                disabled={isDetecting || !inputText?.trim()}
                className="flex items-center gap-2"
              >
                {isDetecting ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Analyzing...
                  </>
                ) : (
                  <>
                    <Shield className="w-4 h-4" />
                    Detect AI Content
                  </>
                )}
              </Button>
              
              <Button
                variant="outline"
                onClick={humanizeText}
                disabled={isHumanizing || !inputText?.trim()}
                className="flex items-center gap-2"
              >
                {isHumanizing ? (
                  <>
                    <Loader2 className="w-4 h-4 animate-spin" />
                    Humanizing...
                  </>
                ) : (
                  <>
                    <Brain className="w-4 h-4" />
                    Humanize Text
                  </>
                )}
              </Button>
            </div>
            
            {!currentUser && (
              <div className="text-sm text-muted-foreground bg-muted p-3 rounded-md">
                ðŸ’¡ Sign up for free to get more detections and access to humanization features
              </div>
            )}
          </CardContent>
        </Card>

        {/* Results Display */}
        {(detectionResult || humanizationResult) && (
          <ResultCard 
            resultText={resultText || ''}
            detectionResult={detectionResult}
            humanizationResult={humanizationResult}
            copyToClipboard={copyToClipboard}
            textCopied={textCopied}
            inputText={inputText}
          />
        )}
      </div>
    );
  } catch (error) {
    console.error('Error in HeroAIDetector:', error);
    return (
      <div className="w-full max-w-4xl mx-auto">
        <Card>
          <CardContent className="text-center p-8">
            <p className="text-muted-foreground">AI Detector temporarily unavailable. Please refresh the page.</p>
          </CardContent>
        </Card>
      </div>
    );
  }
};

export default HeroAIDetector;